import{T as e,a as t,b as s}from"./index-BPITCvXL.js";class a{constructor(){this.supportCascades=!1}loadCubeData(a,c,o,r,n){if(Array.isArray(a))return;const i=c.getEngine().getCaps(),p={supportedCompressionFormats:{etc1:!!i.etc1,s3tc:!!i.s3tc,pvrtc:!!i.pvrtc,etc2:!!i.etc2,astc:!!i.astc,bc7:!!i.bptc}};e(a,p).then(e=>{const s=e.fileInfo.images[0].levels.length>1&&c.generateMipMaps;t(c,e),c.getEngine()._setCubeMapTextureParams(c,s),c.isReady=!0,c.onLoadedObservable.notifyObservers(c),c.onLoadedObservable.clear(),r&&r()}).catch(e=>{s.Warn("Failed to transcode Basis file, transcoding may not be supported on this device"),c.isReady=!0,n&&n(e)})}loadData(a,c,o){const r=c.getEngine().getCaps(),n={supportedCompressionFormats:{etc1:!!r.etc1,s3tc:!!r.s3tc,pvrtc:!!r.pvrtc,etc2:!!r.etc2,astc:!!r.astc,bc7:!!r.bptc}};e(a,n).then(e=>{const s=e.fileInfo.images[0].levels[0],a=e.fileInfo.images[0].levels.length>1&&c.generateMipMaps;o(s.width,s.height,a,-1!==e.format,()=>{t(c,e)})}).catch(e=>{s.Warn("Failed to transcode Basis file, transcoding may not be supported on this device"),s.Warn(`Failed to transcode Basis file: ${e}`),o(0,0,!1,!1,()=>{},!0)})}}export{a as _BasisTextureLoader};
//# sourceMappingURL=basisTextureLoader-BmRCSiCK.js.map
