{"version":3,"file":"exrTextureLoader-oXSN0hsg.js","sources":["../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.compression.js","../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.compression.rle.js","../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/exrTextureLoader.js","../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.header.js","../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.decoder.js"],"sourcesContent":["import { ApplyLut, HufUncompress, ReverseLutFromBitmap, Wav2Decode } from \"./exrLoader.compression.huf.js\";\nimport { DecodeRunLength } from \"./exrLoader.compression.rle.js\";\nimport { InterleaveScalar, ParseUint16, ParseUint32, ParseUint8, Predictor } from \"./exrLoader.core.js\";\nimport { BITMAP_SIZE, INT16_SIZE, USHORT_RANGE } from \"./exrLoader.interfaces.js\";\n/**\n * No compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRAW(decoder) {\n    return new DataView(decoder.array.buffer, decoder.offset.value, decoder.size);\n}\n/**\n * RLE compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRLE(decoder) {\n    const compressed = decoder.viewer.buffer.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = new Uint8Array(DecodeRunLength(compressed));\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * Zip compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressZIP(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PXR compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPXR(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const sz = decoder.lines * decoder.channels * decoder.width;\n    const tmpBuffer = decoder.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n    let tmpBufferEnd = 0;\n    let writePtr = 0;\n    const ptr = new Array(4);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            let pixel = 0;\n            switch (decoder.type) {\n                case 1:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    tmpBufferEnd = ptr[1] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 8) | rawBuffer[ptr[1]++];\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n                case 2:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    ptr[2] = ptr[1] + decoder.width;\n                    tmpBufferEnd = ptr[2] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 24) | (rawBuffer[ptr[1]++] << 16) | (rawBuffer[ptr[2]++] << 8);\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n            }\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PIZ compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPIZ(decoder) {\n    const inDataView = decoder.viewer;\n    const inOffset = { value: decoder.offset.value };\n    const outBuffer = new Uint16Array(decoder.width * decoder.scanlineBlockSize * (decoder.channels * decoder.type));\n    const bitmap = new Uint8Array(BITMAP_SIZE);\n    // Setup channel info\n    let outBufferEnd = 0;\n    const pizChannelData = new Array(decoder.channels);\n    for (let i = 0; i < decoder.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i][\"start\"] = outBufferEnd;\n        pizChannelData[i][\"end\"] = pizChannelData[i][\"start\"];\n        pizChannelData[i][\"nx\"] = decoder.width;\n        pizChannelData[i][\"ny\"] = decoder.lines;\n        pizChannelData[i][\"size\"] = decoder.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n    }\n    // Read range compression data\n    const minNonZero = ParseUint16(inDataView, inOffset);\n    const maxNonZero = ParseUint16(inDataView, inOffset);\n    if (maxNonZero >= BITMAP_SIZE) {\n        throw new Error(\"Wrong PIZ_COMPRESSION BITMAP_SIZE\");\n    }\n    if (minNonZero <= maxNonZero) {\n        for (let i = 0; i < maxNonZero - minNonZero + 1; i++) {\n            bitmap[i + minNonZero] = ParseUint8(inDataView, inOffset);\n        }\n    }\n    // Reverse LUT\n    const lut = new Uint16Array(USHORT_RANGE);\n    const maxValue = ReverseLutFromBitmap(bitmap, lut);\n    const length = ParseUint32(inDataView, inOffset);\n    // Huffman decoding\n    HufUncompress(decoder.array, inDataView, inOffset, length, outBuffer, outBufferEnd);\n    // Wavelet decoding\n    for (let i = 0; i < decoder.channels; ++i) {\n        const cd = pizChannelData[i];\n        for (let j = 0; j < pizChannelData[i].size; ++j) {\n            Wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n    }\n    // Expand the pixel data to their original range\n    ApplyLut(lut, outBuffer, outBufferEnd);\n    // Rearrange the pixel data into the format expected by the caller.\n    let tmpOffset = 0;\n    const tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            const cd = pizChannelData[c];\n            const n = cd.nx * cd.size;\n            const cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n            tmpBuffer.set(cp, tmpOffset);\n            tmpOffset += n * INT16_SIZE;\n            cd.end += n;\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n//# sourceMappingURL=exrLoader.compression.js.map","/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/** @internal */\nexport function DecodeRunLength(source) {\n    let size = source.byteLength;\n    const out = new Array();\n    let p = 0;\n    const reader = new DataView(source);\n    while (size > 0) {\n        const l = reader.getInt8(p++);\n        if (l < 0) {\n            const count = -l;\n            size -= count + 1;\n            for (let i = 0; i < count; i++) {\n                out.push(reader.getUint8(p++));\n            }\n        }\n        else {\n            const count = l;\n            size -= 2;\n            const value = reader.getUint8(p++);\n            for (let i = 0; i < count + 1; i++) {\n                out.push(value);\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=exrLoader.compression.rle.js.map","import { GetExrHeader } from \"./EXR/exrLoader.header.js\";\nimport { CreateDecoderAsync, ScanData } from \"./EXR/exrLoader.decoder.js\";\nimport { ExrLoaderGlobalConfiguration } from \"./EXR/exrLoader.configuration.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Loader for .exr file format\n * @see [PIZ compression](https://playground.babylonjs.com/#4RN0VF#151)\n * @see [ZIP compression](https://playground.babylonjs.com/#4RN0VF#146)\n * @see [RLE compression](https://playground.babylonjs.com/#4RN0VF#149)\n * @see [PXR24 compression](https://playground.babylonjs.com/#4RN0VF#150)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _ExrTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param _data contains the texture data\n     * @param _texture defines the BabylonJS internal texture\n     * @param _createPolynomials will be true if polynomials have been requested\n     * @param _onLoad defines the callback to trigger once the texture is ready\n     * @param _onError defines the callback to trigger in case of error\n     * Cube texture are not supported by .exr files\n     */\n    loadCubeData(_data, _texture, _createPolynomials, _onLoad, _onError) {\n        // eslint-disable-next-line no-throw-literal\n        throw \".exr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    async loadData(data, texture, callback) {\n        const dataView = new DataView(data.buffer);\n        const offset = { value: 0 };\n        const header = GetExrHeader(dataView, offset);\n        const decoder = await CreateDecoderAsync(header, dataView, offset, ExrLoaderGlobalConfiguration.DefaultOutputType);\n        ScanData(decoder, header, dataView, offset);\n        // Updating texture\n        const width = header.dataWindow.xMax - header.dataWindow.xMin + 1;\n        const height = header.dataWindow.yMax - header.dataWindow.yMin + 1;\n        callback(width, height, texture.generateMipMaps, false, () => {\n            const engine = texture.getEngine();\n            texture.format = header.format;\n            texture.type = decoder.textureType;\n            texture.invertY = false;\n            texture._gammaSpace = !header.linearSpace;\n            if (decoder.byteArray) {\n                engine._uploadDataToTextureDirectly(texture, decoder.byteArray, 0, 0, undefined, true);\n            }\n        });\n    }\n}\n//# sourceMappingURL=exrTextureLoader.js.map","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../../Misc/logger.js\";\nimport { ParseNullTerminatedString, ParseUint32, ParseValue } from \"./exrLoader.core.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nconst EXR_MAGIC = 20000630;\n/**\n * Gets the EXR header\n * @param dataView defines the data view to read from\n * @param offset defines the offset to start reading from\n * @returns the header\n */\nexport function GetExrHeader(dataView, offset) {\n    if (dataView.getUint32(0, true) != EXR_MAGIC) {\n        throw new Error(\"Incorrect OpenEXR format\");\n    }\n    const version = dataView.getUint8(4);\n    const specData = dataView.getUint8(5); // fullMask\n    const spec = {\n        singleTile: !!(specData & 2),\n        longName: !!(specData & 4),\n        deepFormat: !!(specData & 8),\n        multiPart: !!(specData & 16),\n    };\n    offset.value = 8;\n    const headerData = {};\n    let keepReading = true;\n    while (keepReading) {\n        const attributeName = ParseNullTerminatedString(dataView.buffer, offset);\n        if (!attributeName) {\n            keepReading = false;\n        }\n        else {\n            const attributeType = ParseNullTerminatedString(dataView.buffer, offset);\n            const attributeSize = ParseUint32(dataView, offset);\n            const attributeValue = ParseValue(dataView, offset, attributeType, attributeSize);\n            if (attributeValue === undefined) {\n                Logger.Warn(`Unknown header attribute type ${attributeType}'.`);\n            }\n            else {\n                headerData[attributeName] = attributeValue;\n            }\n        }\n    }\n    if ((specData & ~0x04) != 0) {\n        throw new Error(\"Unsupported file format\");\n    }\n    return { version: version, spec: spec, ...headerData };\n}\n//# sourceMappingURL=exrLoader.header.js.map","import { CompressionCodes, DecodeFloat32, ParseFloat16, ParseFloat32, ParseInt32, ParseInt64, ParseUint16, ParseUint32 } from \"./exrLoader.core.js\";\nimport { UncompressPIZ, UncompressPXR, UncompressRAW, UncompressRLE, UncompressZIP } from \"./exrLoader.compression.js\";\nimport { FLOAT32_SIZE, INT16_SIZE } from \"./exrLoader.interfaces.js\";\n\nimport { Tools } from \"../../../../Misc/tools.js\";\nimport { ExrLoaderGlobalConfiguration, EXROutputType } from \"./exrLoader.configuration.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Create a decoder for the exr file\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n * @param outputType expected output type (float or half float)\n * @returns a promise that resolves with the decoder\n */\nexport async function CreateDecoderAsync(header, dataView, offset, outputType) {\n    const decoder = {\n        size: 0,\n        viewer: dataView,\n        array: new Uint8Array(dataView.buffer),\n        offset: offset,\n        width: header.dataWindow.xMax - header.dataWindow.xMin + 1,\n        height: header.dataWindow.yMax - header.dataWindow.yMin + 1,\n        channels: header.channels.length,\n        channelLineOffsets: {},\n        scanOrder: () => 0,\n        bytesPerLine: 0,\n        outLineWidth: 0,\n        lines: 0,\n        scanlineBlockSize: 0,\n        inputSize: null,\n        type: 0,\n        uncompress: null,\n        getter: () => 0,\n        format: 5,\n        outputChannels: 0,\n        decodeChannels: {},\n        blockCount: null,\n        byteArray: null,\n        linearSpace: false,\n        textureType: 0,\n    };\n    switch (header.compression) {\n        case CompressionCodes.NO_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRAW;\n            break;\n        case CompressionCodes.RLE_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRLE;\n            break;\n        case CompressionCodes.ZIPS_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.ZIP_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.PIZ_COMPRESSION:\n            decoder.lines = 32;\n            decoder.uncompress = UncompressPIZ;\n            break;\n        case CompressionCodes.PXR24_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressPXR;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        default:\n            throw new Error(CompressionCodes[header.compression] + \" is unsupported\");\n    }\n    decoder.scanlineBlockSize = decoder.lines;\n    const channels = {};\n    for (const channel of header.channels) {\n        switch (channel.name) {\n            case \"Y\":\n            case \"R\":\n            case \"G\":\n            case \"B\":\n            case \"A\":\n                channels[channel.name] = true;\n                decoder.type = channel.pixelType;\n        }\n    }\n    // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n    let fillAlpha = false;\n    if (channels.R && channels.G && channels.B) {\n        fillAlpha = !channels.A;\n        decoder.outputChannels = 4;\n        decoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n    }\n    else if (channels.Y) {\n        decoder.outputChannels = 1;\n        decoder.decodeChannels = { Y: 0 };\n    }\n    else {\n        throw new Error(\"EXRLoader.parse: file contains unsupported data channels.\");\n    }\n    if (decoder.type === 1) {\n        // half\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = ParseUint16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n        }\n    }\n    else if (decoder.type === 2) {\n        // float\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = DecodeFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n        }\n    }\n    else {\n        throw new Error(\"Unsupported pixelType \" + decoder.type + \" for \" + header.compression);\n    }\n    decoder.blockCount = decoder.height / decoder.scanlineBlockSize;\n    for (let i = 0; i < decoder.blockCount; i++) {\n        ParseInt64(dataView, offset); // scanlineOffset\n    }\n    // we should be passed the scanline offset table, ready to start reading pixel data.\n    const size = decoder.width * decoder.height * decoder.outputChannels;\n    switch (outputType) {\n        case EXROutputType.Float:\n            decoder.byteArray = new Float32Array(size);\n            decoder.textureType = 1;\n            // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n            if (fillAlpha) {\n                decoder.byteArray.fill(1, 0, size);\n            }\n            break;\n        case EXROutputType.HalfFloat:\n            decoder.byteArray = new Uint16Array(size);\n            decoder.textureType = 2;\n            if (fillAlpha) {\n                decoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n            }\n            break;\n        default:\n            throw new Error(\"Unsupported type: \" + outputType);\n    }\n    let byteOffset = 0;\n    for (const channel of header.channels) {\n        if (decoder.decodeChannels[channel.name] !== undefined) {\n            decoder.channelLineOffsets[channel.name] = byteOffset * decoder.width;\n        }\n        byteOffset += channel.pixelType * 2;\n    }\n    decoder.bytesPerLine = decoder.width * byteOffset;\n    decoder.outLineWidth = decoder.width * decoder.outputChannels;\n    if (header.lineOrder === \"INCREASING_Y\") {\n        decoder.scanOrder = (y) => y;\n    }\n    else {\n        decoder.scanOrder = (y) => decoder.height - 1 - y;\n    }\n    if (decoder.outputChannels == 4) {\n        decoder.format = 5;\n        decoder.linearSpace = true;\n    }\n    else {\n        decoder.format = 6;\n        decoder.linearSpace = false;\n    }\n    return decoder;\n}\n/**\n * Scan the data of the exr file\n * @param decoder decoder to use\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n */\nexport function ScanData(decoder, header, dataView, offset) {\n    const tmpOffset = { value: 0 };\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < decoder.height / decoder.scanlineBlockSize; scanlineBlockIdx++) {\n        const line = ParseInt32(dataView, offset) - header.dataWindow.yMin; // line_no\n        decoder.size = ParseUint32(dataView, offset); // data_len\n        decoder.lines = line + decoder.scanlineBlockSize > decoder.height ? decoder.height - line : decoder.scanlineBlockSize;\n        const isCompressed = decoder.size < decoder.lines * decoder.bytesPerLine;\n        const viewer = isCompressed && decoder.uncompress ? decoder.uncompress(decoder) : UncompressRAW(decoder);\n        offset.value += decoder.size;\n        for (let line_y = 0; line_y < decoder.scanlineBlockSize; line_y++) {\n            const scan_y = scanlineBlockIdx * decoder.scanlineBlockSize;\n            const true_y = line_y + decoder.scanOrder(scan_y);\n            if (true_y >= decoder.height) {\n                continue;\n            }\n            const lineOffset = line_y * decoder.bytesPerLine;\n            const outLineOffset = (decoder.height - 1 - true_y) * decoder.outLineWidth;\n            for (let channelID = 0; channelID < decoder.channels; channelID++) {\n                const name = header.channels[channelID].name;\n                const lOff = decoder.channelLineOffsets[name];\n                const cOff = decoder.decodeChannels[name];\n                if (cOff === undefined) {\n                    continue;\n                }\n                tmpOffset.value = lineOffset + lOff;\n                for (let x = 0; x < decoder.width; x++) {\n                    const outIndex = outLineOffset + x * decoder.outputChannels + cOff;\n                    if (decoder.byteArray) {\n                        decoder.byteArray[outIndex] = decoder.getter(viewer, tmpOffset);\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=exrLoader.decoder.js.map"],"names":["UncompressRAW","decoder","DataView","array","buffer","offset","value","size","UncompressRLE","compressed","viewer","slice","rawBuffer","Uint8Array","source","byteLength","out","Array","p","reader","l","getInt8","count","i","push","getUint8","DecodeRunLength","tmpBuffer","length","Predictor","InterleaveScalar","UncompressZIP","fflate","unzlibSync","UncompressPXR","sz","lines","channels","width","type","Uint16Array","Uint32Array","tmpBufferEnd","writePtr","ptr","y","c","pixel","j","UncompressPIZ","inDataView","inOffset","outBuffer","scanlineBlockSize","bitmap","BITMAP_SIZE","outBufferEnd","pizChannelData","nx","ny","minNonZero","ParseUint16","maxNonZero","Error","ParseUint8","lut","USHORT_RANGE","maxValue","ReverseLutFromBitmap","ParseUint32","HufUncompress","cd","Wav2Decode","start","ApplyLut","tmpOffset","n","cp","end","INT16_SIZE","set","_ExrTextureLoader","constructor","this","supportCascades","loadCubeData","_data","_texture","_createPolynomials","_onLoad","_onError","loadData","data","texture","callback","dataView","header","getUint32","version","specData","spec","singleTile","longName","deepFormat","multiPart","headerData","keepReading","attributeName","ParseNullTerminatedString","attributeType","attributeSize","attributeValue","ParseValue","undefined","Logger","Warn","GetExrHeader","async","outputType","dataWindow","xMax","xMin","height","yMax","yMin","channelLineOffsets","scanOrder","bytesPerLine","outLineWidth","inputSize","uncompress","getter","format","outputChannels","decodeChannels","blockCount","byteArray","linearSpace","textureType","compression","CompressionCodes","NO_COMPRESSION","RLE_COMPRESSION","ZIPS_COMPRESSION","Tools","LoadScriptAsync","ExrLoaderGlobalConfiguration","FFLATEUrl","ZIP_COMPRESSION","PIZ_COMPRESSION","PXR24_COMPRESSION","channel","name","pixelType","fillAlpha","R","G","B","A","Y","EXROutputType","Float","ParseFloat16","HalfFloat","ParseFloat32","FLOAT32_SIZE","DecodeFloat32","ParseInt64","Float32Array","fill","byteOffset","lineOrder","CreateDecoderAsync","DefaultOutputType","scanlineBlockIdx","line","ParseInt32","line_y","scan_y","true_y","lineOffset","outLineOffset","channelID","lOff","cOff","x","outIndex","ScanData","generateMipMaps","engine","getEngine","invertY","_gammaSpace","_uploadDataToTextureDirectly"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}