import{D as e,S as a}from"./index-jWkOtuW3.js";class i{constructor(){this.supportCascades=!0}loadCubeData(i,t,s,p){const o=t.getEngine();let n,r=!1,m=1e3;if(Array.isArray(i))for(let a=0;a<i.length;a++){const s=i[a];n=e.GetDDSInfo(s),t.width=n.width,t.height=n.height,r=(n.isRGB||n.isLuminance||n.mipmapCount>1)&&t.generateMipMaps,o._unpackFlipY(n.isCompressed),e.UploadDDSLevels(o,t,s,n,r,6,-1,a),n.isFourCC||1!==n.mipmapCount?m=n.mipmapCount-1:o.generateMipMapsForCubemap(t)}else{const p=i;n=e.GetDDSInfo(p),t.width=n.width,t.height=n.height,s&&(n.sphericalPolynomial=new a),r=(n.isRGB||n.isLuminance||n.mipmapCount>1)&&t.generateMipMaps,o._unpackFlipY(n.isCompressed),e.UploadDDSLevels(o,t,p,n,r,6),n.isFourCC||1!==n.mipmapCount?m=n.mipmapCount-1:o.generateMipMapsForCubemap(t,!1)}o._setCubeMapTextureParams(t,r,m),t.isReady=!0,t.onLoadedObservable.notifyObservers(t),t.onLoadedObservable.clear(),p&&p({isDDS:!0,width:t.width,info:n,data:i,texture:t})}loadData(a,i,t){const s=e.GetDDSInfo(a),p=(s.isRGB||s.isLuminance||s.mipmapCount>1)&&i.generateMipMaps&&Math.max(s.width,s.height)>>s.mipmapCount-1==1;t(s.width,s.height,p,s.isFourCC,()=>{e.UploadDDSLevels(i.getEngine(),i,a,s,p,1)})}}export{i as _DDSTextureLoader};
//# sourceMappingURL=ddsTextureLoader-C-3EOEqM.js.map
