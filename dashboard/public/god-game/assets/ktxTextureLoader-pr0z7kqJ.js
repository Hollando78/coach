import{K as e,e as a,f as r}from"./index-sKWi3Pmp.js";class t{constructor(){this.supportCascades=!1}loadCubeData(a,r,t,n){if(Array.isArray(a))return;r._invertVScale=!r.invertY;const s=r.getEngine(),i=new e(a,6),l=i.numberOfMipmapLevels>1&&r.generateMipMaps;s._unpackFlipY(!0),i.uploadLevels(r,r.generateMipMaps),r.width=i.pixelWidth,r.height=i.pixelHeight,s._setCubeMapTextureParams(r,l,i.numberOfMipmapLevels-1),r.isReady=!0,r.onLoadedObservable.notifyObservers(r),r.onLoadedObservable.clear(),n&&n()}loadData(t,n,s,i){if(e.IsValid(t)){n._invertVScale=!n.invertY;const a=new e(t,1),r=function(e){switch(e){case 35916:return 33776;case 35918:return 33778;case 35919:return 33779;case 37493:return 37492;case 37497:return 37496;case 37495:return 37494;case 37840:return 37808;case 36493:return 36492}return null}(a.glInternalFormat);r?(n.format=r,n._useSRGBBuffer=n.getEngine()._getUseSRGBBuffer(!0,n.generateMipMaps),n._gammaSpace=!0):n.format=a.glInternalFormat,s(a.pixelWidth,a.pixelHeight,n.generateMipMaps,!0,()=>{a.uploadLevels(n,n.generateMipMaps)},a.isInvalid)}else if(a.IsValid(t)){new a(n.getEngine())._uploadAsync(t,n,i).then(()=>{s(n.width,n.height,n.generateMipMaps,!0,()=>{},!1)},e=>{r.Warn(`Failed to load KTX2 texture data: ${e.message}`),s(0,0,!1,!1,()=>{},!0)})}else r.Error("texture missing KTX identifier"),s(0,0,!1,!1,()=>{},!0)}}export{t as _KTXTextureLoader};
//# sourceMappingURL=ktxTextureLoader-pr0z7kqJ.js.map
