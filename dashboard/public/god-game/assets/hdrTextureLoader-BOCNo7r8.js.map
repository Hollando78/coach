{"version":3,"file":"hdrTextureLoader-BOCNo7r8.js","sources":["../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/hdrTextureLoader.js"],"sourcesContent":["import { RGBE_ReadHeader, RGBE_ReadPixels } from \"../../../Misc/HighDynamicRange/hdr.js\";\n\n/**\n * Implementation of the HDR Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _HDRTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * Cube texture are not supported by .hdr files\n     */\n    loadCubeData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".hdr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        const hdrInfo = RGBE_ReadHeader(uint8array);\n        const pixelsDataRGB32 = RGBE_ReadPixels(uint8array, hdrInfo);\n        const pixels = hdrInfo.width * hdrInfo.height;\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\n        for (let i = 0; i < pixels; i += 1) {\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n            pixelsDataRGBA32[i * 4 + 3] = 1;\n        }\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\n            const engine = texture.getEngine();\n            texture.type = 1;\n            texture.format = 5;\n            texture._gammaSpace = false;\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n        });\n    }\n}\n//# sourceMappingURL=hdrTextureLoader.js.map"],"names":["_HDRTextureLoader","constructor","this","supportCascades","loadCubeData","loadData","data","texture","callback","uint8array","Uint8Array","buffer","byteOffset","byteLength","hdrInfo","RGBE_ReadHeader","pixelsDataRGB32","RGBE_ReadPixels","pixels","width","height","pixelsDataRGBA32","Float32Array","i","generateMipMaps","engine","getEngine","type","format","_gammaSpace","_uploadDataToTextureDirectly"],"mappings":"+CAOO,MAAMA,EACT,WAAAC,GAIIC,KAAKC,iBAAkB,CAC3B,CAKA,YAAAC,GAEI,KAAM,6BACV,CAOA,QAAAC,CAASC,EAAMC,EAASC,GACpB,MAAMC,EAAa,IAAIC,WAAWJ,EAAKK,OAAQL,EAAKM,WAAYN,EAAKO,YAC/DC,EAAUC,EAAgBN,GAC1BO,EAAkBC,EAAgBR,EAAYK,GAC9CI,EAASJ,EAAQK,MAAQL,EAAQM,OACjCC,EAAmB,IAAIC,aAAsB,EAATJ,GAC1C,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAC7BF,EAAqB,EAAJE,GAASP,EAAoB,EAAJO,GAC1CF,EAAqB,EAAJE,EAAQ,GAAKP,EAAoB,EAAJO,EAAQ,GACtDF,EAAqB,EAAJE,EAAQ,GAAKP,EAAoB,EAAJO,EAAQ,GACtDF,EAAqB,EAAJE,EAAQ,GAAK,EAElCf,EAASM,EAAQK,MAAOL,EAAQM,OAAQb,EAAQiB,iBAAiB,EAAO,KACpE,MAAMC,EAASlB,EAAQmB,YACvBnB,EAAQoB,KAAO,EACfpB,EAAQqB,OAAS,EACjBrB,EAAQsB,aAAc,EACtBJ,EAAOK,6BAA6BvB,EAASc,IAErD","x_google_ignoreList":[0]}