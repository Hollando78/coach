{"version":3,"file":"tgaTextureLoader-DT5w0fgi.js","sources":["../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/tgaTextureLoader.js"],"sourcesContent":["import { GetTGAHeader, UploadContent } from \"../../../Misc/tga.js\";\n/**\n * Implementation of the TGA Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _TGATextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     */\n    loadCubeData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".env not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        const header = GetTGAHeader(bytes);\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\n            UploadContent(texture, bytes);\n        });\n    }\n}\n//# sourceMappingURL=tgaTextureLoader.js.map"],"names":["_TGATextureLoader","constructor","this","supportCascades","loadCubeData","loadData","data","texture","callback","bytes","Uint8Array","buffer","byteOffset","byteLength","header","GetTGAHeader","width","height","generateMipMaps","UploadContent"],"mappings":"+CAMO,MAAMA,EACT,WAAAC,GAIIC,KAAKC,iBAAkB,CAC3B,CAIA,YAAAC,GAEI,KAAM,6BACV,CAOA,QAAAC,CAASC,EAAMC,EAASC,GACpB,MAAMC,EAAQ,IAAIC,WAAWJ,EAAKK,OAAQL,EAAKM,WAAYN,EAAKO,YAC1DC,EAASC,EAAaN,GAC5BD,EAASM,EAAOE,MAAOF,EAAOG,OAAQV,EAAQW,iBAAiB,EAAO,KAClEC,EAAcZ,EAASE,IAE/B","x_google_ignoreList":[0]}