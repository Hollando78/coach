{"version":3,"file":"ktxTextureLoader-DYhpTcAh.js","sources":["../../../node_modules/.pnpm/@babylonjs+core@7.54.3/node_modules/@babylonjs/core/Materials/Textures/Loaders/ktxTextureLoader.js"],"sourcesContent":["import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer.js\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\n\nfunction mapSRGBToLinear(format) {\n    switch (format) {\n        case 35916:\n            return 33776;\n        case 35918:\n            return 33778;\n        case 35919:\n            return 33779;\n        case 37493:\n            return 37492;\n        case 37497:\n            return 37496;\n        case 37495:\n            return 37494;\n        case 37840:\n            return 37808;\n        case 36493:\n            return 36492;\n    }\n    return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _KTXTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n        texture._invertVScale = !texture.invertY;\n        const engine = texture.getEngine();\n        const ktx = new KhronosTextureContainer(data, 6);\n        const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n        engine._unpackFlipY(true);\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n        texture.width = ktx.pixelWidth;\n        texture.height = ktx.pixelHeight;\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     * @param options\n     */\n    loadData(data, texture, callback, options) {\n        if (KhronosTextureContainer.IsValid(data)) {\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n            texture._invertVScale = !texture.invertY;\n            const ktx = new KhronosTextureContainer(data, 1);\n            const mappedFormat = mapSRGBToLinear(ktx.glInternalFormat);\n            if (mappedFormat) {\n                texture.format = mappedFormat;\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n                texture._gammaSpace = true;\n            }\n            else {\n                texture.format = ktx.glInternalFormat;\n            }\n            callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\n                ktx.uploadLevels(texture, texture.generateMipMaps);\n            }, ktx.isInvalid);\n        }\n        else if (KhronosTextureContainer2.IsValid(data)) {\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\n            ktx2._uploadAsync(data, texture, options).then(() => {\n                callback(texture.width, texture.height, texture.generateMipMaps, true, () => { }, false);\n            }, (error) => {\n                Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\n                callback(0, 0, false, false, () => { }, true);\n            });\n        }\n        else {\n            Logger.Error(\"texture missing KTX identifier\");\n            callback(0, 0, false, false, () => { }, true);\n        }\n    }\n}\n//# sourceMappingURL=ktxTextureLoader.js.map"],"names":["_KTXTextureLoader","constructor","this","supportCascades","loadCubeData","data","texture","createPolynomials","onLoad","Array","isArray","_invertVScale","invertY","engine","getEngine","ktx","KhronosTextureContainer","loadMipmap","numberOfMipmapLevels","generateMipMaps","_unpackFlipY","uploadLevels","width","pixelWidth","height","pixelHeight","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","loadData","callback","options","IsValid","mappedFormat","format","mapSRGBToLinear","glInternalFormat","_useSRGBBuffer","_getUseSRGBBuffer","_gammaSpace","isInvalid","KhronosTextureContainer2","_uploadAsync","then","error","Logger","Warn","message","Error"],"mappings":"sDA8BO,MAAMA,EACT,WAAAC,GAIIC,KAAKC,iBAAkB,CAC3B,CAQA,YAAAC,CAAaC,EAAMC,EAASC,EAAmBC,GAC3C,GAAIC,MAAMC,QAAQL,GACd,OAGJC,EAAQK,eAAiBL,EAAQM,QACjC,MAAMC,EAASP,EAAQQ,YACjBC,EAAM,IAAIC,EAAwBX,EAAM,GACxCY,EAAaF,EAAIG,qBAAuB,GAAKZ,EAAQa,gBAC3DN,EAAOO,cAAa,GACpBL,EAAIM,aAAaf,EAASA,EAAQa,iBAClCb,EAAQgB,MAAQP,EAAIQ,WACpBjB,EAAQkB,OAAST,EAAIU,YACrBZ,EAAOa,yBAAyBpB,EAASW,EAAYF,EAAIG,qBAAuB,GAChFZ,EAAQqB,SAAU,EAClBrB,EAAQsB,mBAAmBC,gBAAgBvB,GAC3CA,EAAQsB,mBAAmBE,QACvBtB,GACAA,GAER,CAQA,QAAAuB,CAAS1B,EAAMC,EAAS0B,EAAUC,GAC9B,GAAIjB,EAAwBkB,QAAQ7B,GAAO,CAEvCC,EAAQK,eAAiBL,EAAQM,QACjC,MAAMG,EAAM,IAAIC,EAAwBX,EAAM,GACxC8B,EAzElB,SAAyBC,GACrB,OAAQA,GACJ,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MACX,KAAK,MACD,OAAO,MAEf,OAAO,IACX,CAqDiCC,CAAgBtB,EAAIuB,kBACrCH,GACA7B,EAAQ8B,OAASD,EACjB7B,EAAQiC,eAAiBjC,EAAQQ,YAAY0B,mBAAkB,EAAMlC,EAAQa,iBAC7Eb,EAAQmC,aAAc,GAGtBnC,EAAQ8B,OAASrB,EAAIuB,iBAEzBN,EAASjB,EAAIQ,WAAYR,EAAIU,YAAanB,EAAQa,iBAAiB,EAAM,KACrEJ,EAAIM,aAAaf,EAASA,EAAQa,kBACnCJ,EAAI2B,UACX,MACK,GAAIC,EAAyBT,QAAQ7B,GAAO,CAChC,IAAIsC,EAAyBrC,EAAQQ,aAC7C8B,aAAavC,EAAMC,EAAS2B,GAASY,KAAK,KAC3Cb,EAAS1B,EAAQgB,MAAOhB,EAAQkB,OAAQlB,EAAQa,iBAAiB,EAAM,QAAW,IAClF2B,IACAC,EAAOC,KAAK,qCAAqCF,EAAMG,WACvDjB,EAAS,EAAG,GAAG,GAAO,EAAO,QAAW,IAEhD,MAEIe,EAAOG,MAAM,kCACblB,EAAS,EAAG,GAAG,GAAO,EAAO,QAAW,EAEhD","x_google_ignoreList":[0]}